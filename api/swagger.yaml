swagger: '2.0'
info:
  title: Pet Shop Example API
  version: "0.1"
  description: Simple example API to store and retrieve pets
consumes:
  - application/json
produces:
  - application/json
#security:
#  # enable OAuth protection for all REST endpoints
#  # (only active if the TOKENINFO_URL environment variable is set)
#  - oauth2: [uid]
paths:
  /challenges:
    post:
      tags: [Challenges]
      operationId: app.challenges.get_all
      parameters:
        - name: from_user
          in: body
          required: true
          schema:
            $ref: "#/definitions/FromUserRequest"
      responses:
        default:
          description: Return challenges
          schema:
            type: array
            items:
              $ref: '#/definitions/Challenge'

  /challenge/apply/{challenge_id}:
    post:
      tags: [Challenges]
      operationId:  app.challenges.apply
      parameters:
        - in: path
          name: challenge_id
          type: string
          required: true
        - in: body
          name: from_user
          schema:
            $ref: "#/definitions/FromUserRequest"
      responses:
        default:
          description: Return updated challenge
          schema:
            $ref: "#/definitions/Challenge"
  /challenge/unapply/{challenge_id}:
    post:
      tags: [Challenges]
      operationId:  app.challenges.unapply
      parameters:
        - in: path
          name: challenge_id
          type: string
          required: true
        - in: body
          name: from_user
          schema:
            $ref: "#/definitions/FromUserRequest"
      responses:
        default:
          description: Return updated challenge
          schema:
            $ref: "#/definitions/Challenge"
  /wishlist/all:
    post:
      tags: [Wishlist]
      operationId: app.wishlist.get_all
      parameters:
        - in: body
          name: from_user
          schema:
            $ref: "#/definitions/FromUserRequest"
      responses:
        default:
          description: Get all wishlist
          schema:
            $ref:  "#/definitions/Wishlist"

  /wishlist:
    post:
      tags: [Wishlist]
      operationId: app.wishlist.create
      parameters:
        - in: body
          name: wishlist_item
          schema:
            $ref: "#/definitions/WishlistCreateRequest"
      responses:
        default:
          description: Create a new wishlist item
          schema:
            type: array
            items:
              $ref:  "#/definitions/Wishlist"

  /wishlist/{item_id}:
    delete:
      tags: [Wishlist]
      operationId: app.wishlist.delete
      parameters:
        - in: path
          name: item_id
          type: string
          required: true
      responses:
        default:
          description: Delete a wishlist item
          schema:
            type: array
            items:
              $ref:  "#/definitions/Wishlist"

  /items/all:
    post:
      tags: [Items]
      operationId: app.items.get_all
      parameters:
        - in: body
          name: from_user
          schema:
            $ref: "#/definitions/FromUserRequest"
      responses:
        default:
          description: Get all user items (spendings)
          schema:
            $ref:  "#/definitions/Item"

  /item:
    post:
      tags: [Items]
      operationId: app.items.create
      parameters:
        - in: body
          name: item
          schema:
            $ref: "#/definitions/ItemCreateRequest"
      responses:
        default:
          description: Create a new wishlist item
          schema:
            type: array
            items:
              $ref:  "#/definitions/Item"


definitions:
  FromUserRequest:
    type: object
    properties:
      id:
        type: number
    required: [id]
  Challenge:
    type: object
  Wishlist:
    type: object
  WishlistCreateRequest:
    type: object
    properties:
      name:
        type: string
      price:
        type: number
      user_fk:
        type: number
      photo_url:
        type: string
      amount:
        type: number
      description:
        type: string
    required: [user_fk, name, price]
  Item:
    type: object
  ItemCreateRequest:
    type: object
    properties:
      price:
        type: number
      amount:
        type: number
      name:
        type: string
      date:
        type: string
      sub_category_fk:
        type: integer
      user_fk:
        type: integer
      description:
        type: string
    required: [price, amount, name, date, sub_category_fk, user_fk]



securityDefinitions:
  oauth2:
    type: oauth2
    flow: implicit
    authorizationUrl: https://example.com/oauth2/dialog
    scopes:
      uid: Unique identifier of the user accessing the service.
